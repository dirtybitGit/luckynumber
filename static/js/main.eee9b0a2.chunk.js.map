{"version":3,"sources":["component/Bottom.js","component/Numbers.js","component/NumberList.js","App.js","serviceWorker.js","index.js"],"names":["Bottom","this","props","onRemake","onQRScan","QRShow","className","name","onClick","Component","Numbers","num","key","num1","num2","num3","num4","num5","num6","NumberList","list","numbers","map","item","index","App","LineCount","state","QRResult","initArray","tmpArray","iCount","iIndex","getOneNum","iRandNum","Array","Math","floor","random","iMaxCnt","clearNumList","setState","splice","length","makeNumList","newNum","tmpNum","aryTmp","iIndex1","indexOf","concat","sort","a","b","handleRemake","QRHandleScan","data","console","log","QRHandleErr","err","delay","onError","onScan","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWA2BeA,G,6LAvBH,IAAD,EACgCC,KAAKC,MAApCC,EADD,EACCA,SAAUC,EADX,EACWA,SAAUC,EADrB,EACqBA,OAC5B,OACE,6BACGA,EACC,4BAAQC,UAAU,MAAMC,KAAK,SAASC,QAASJ,GAA/C,4BAIA,6BACE,4BAAQE,UAAU,MAAMC,KAAK,SAASC,QAASL,GAA/C,mCAGA,4BAAQG,UAAU,MAAMC,KAAK,SAASC,QAASJ,GAA/C,+C,GAdSK,cC4BNC,G,sMAxBP,OAAW,OADGT,KAAKC,MAAZS,M,+BAKA,IACAA,EAAOV,KAAKC,MAAZS,IACP,OACI,yBAAKL,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,YAAYK,EAAIC,IAAM,EAArC,6BACA,yBAAKN,UAAU,WACX,6BAAK,8BAAOK,EAAIE,OAChB,6BAAK,8BAAOF,EAAIG,OAChB,6BAAK,8BAAOH,EAAII,OAChB,6BAAK,8BAAOJ,EAAIK,OAChB,6BAAK,8BAAOL,EAAIM,OAChB,6BAAK,8BAAON,EAAIO,c,GApBlBT,cCyBPU,G,uLAtBD,IAGAC,EAFYnB,KAAKC,MAAhBmB,QAEcC,KACjB,SAAAC,GAAI,OACA,kBAAC,EAAD,CAASZ,IAAKY,EAAMC,MAAOD,EAAKX,IAAKA,IAAKW,EAAKX,SAIvD,OACI,6BACI,yBAAKN,UAAU,OACX,yBAAKA,UAAU,eAAf,mCACA,yBAAKA,UAAU,gBAAf,iDAEJ,6BAAMc,Q,GAjBGX,cC8IVgB,E,2MA3IbC,UAAY,E,EAEZC,MAAQ,CACNN,QAAS,GAWTO,SAAU,GACVvB,QAAQ,G,EAGVwB,UAAY,SAACC,EAAUC,GACrB,IAAK,IAAIC,EAAS,EAAGA,EAASD,EAAQC,IACpCF,EAASE,GAAU,EAErB,OAAOF,G,EAGTG,UAAY,SAAAF,GACV,IAAIG,EAAW,EACXJ,EAAW,IAAIK,MAAM,IAEzBL,EAAW,EAAKD,UAAUC,EAAU,IACpC,IAAK,IAAIE,EAAS,EAAGA,EAASD,EAAQC,IAEpCF,EADAI,EAAWE,KAAKC,MAAsB,GAAhBD,KAAKE,WACNR,EAASI,GAAY,EAE5C,IAAIK,EAAU,EAEd,IAAKP,EAAS,EAAGA,EAAS,GAAIA,IACxBF,EAASE,GAAUO,IACrBL,EAAWF,EACXO,EAAUT,EAASE,IAGvB,OAAOE,EAAW,G,EAGpBM,aAAe,WAAO,IACZnB,EAAY,EAAKM,MAAjBN,QAER,EAAKoB,SAAS,CACZpB,QAASA,EAAQqB,OAAO,EAAGrB,EAAQsB,W,EAIvCC,YAAc,WACZ,EAAKJ,eAML,IAJA,IAAIK,EAAS,GAETC,EAAS,EAEJd,EAAS,EAAGA,EAAS,EAAKN,UAAWM,IAAU,CAEtD,IADA,IAAIe,EAAS,GACJC,EAAU,EAAGA,EAAU,EAAGA,IAAW,CAE5C,IADAF,EAAS,EAAKb,UAAU,MACW,IAA5Bc,EAAOE,QAAQH,IACpBA,EAAS,EAAKb,UAAU,KAE1Bc,EAASA,EAAOG,OAAOJ,GAEzBC,EAASA,EAAOI,MAAK,SAASC,EAAGC,GAC/B,OAAOD,EAAIC,KAEbR,EAASA,EAAOK,OAAO,CACrBtC,IAAKoB,EACLnB,KAAMkC,EAAO,GACbjC,KAAMiC,EAAO,GACbhC,KAAMgC,EAAO,GACb/B,KAAM+B,EAAO,GACb9B,KAAM8B,EAAO,GACb7B,KAAM6B,EAAO,KAIjB,EAAKN,SAAS,CACZpB,QAASwB,K,EAIbS,aAAe,WACb,EAAKV,e,EAOPxC,SAAW,WACT,EAAKqC,SAAS,CAAEpC,QAAS,EAAKsB,MAAMtB,U,EAGtCkD,aAAe,SAAAC,GACTA,IACF,EAAKf,SAAS,CAAEb,SAAU4B,IAC1BC,QAAQC,IAAIF,K,EAIhBG,YAAc,SAAAC,GACZH,QAAQC,IAAIE,I,mFAfZ3D,KAAKqD,iB,+BAkBG,IAAD,EACqBrD,KAAK0B,MAAzBN,EADD,EACCA,QAAShB,EADV,EACUA,OAEjB,OACE,yBAAKC,UAAU,OACZD,EACC,6BACE,kBAAC,IAAD,CACEwD,MAAO,IACPC,QAAS7D,KAAK0D,YACdI,OAAQ9D,KAAKsD,aACbjD,UAAU,eAEZ,2BAAIL,KAAK0B,MAAMC,WAGjB,kBAAC,EAAD,CAAYP,QAASA,IAEvB,kBAAC,EAAD,CACElB,SAAUF,KAAKqD,aACflD,SAAUH,KAAKG,SACfC,OAAQA,S,GArIAI,aCMEuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eee9b0a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Bottom.css\";\r\n\r\nclass Bottom extends Component {\r\n  render() {\r\n    const { onRemake, onQRScan, QRShow } = this.props;\r\n    return (\r\n      <div>\r\n        {QRShow ? (\r\n          <button className=\"Btn\" name=\"qrscan\" onClick={onQRScan}>\r\n            돌아가기\r\n          </button>\r\n        ) : (\r\n          <div>\r\n            <button className=\"Btn\" name=\"remake\" onClick={onRemake}>\r\n              다시 만들기\r\n            </button>\r\n            <button className=\"Btn\" name=\"qrscan\" onClick={onQRScan}>\r\n              당첨번호 확인\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bottom;\r\n","import React, {Component} from 'react';\r\nimport './Numbers.css';\r\n\r\nclass Numbers extends Component {\r\n\r\n    shouldComponentUpdate() {\r\n        const {num} = this.props;\r\n        if(num === null) return false;\r\n        return true;\r\n    }\r\n\r\n     render() {\r\n        const {num} = this.props\r\n        return(\r\n            <div className='numLine'>\r\n                <div className='numbox'>\r\n                    <div className='numTitle'>{num.key + 1}번째 숫자</div>\r\n                    <div className=\"Numbers\">\r\n                        <div><span>{num.num1}</span></div>\r\n                        <div><span>{num.num2}</span></div>\r\n                        <div><span>{num.num3}</span></div>\r\n                        <div><span>{num.num4}</span></div>\r\n                        <div><span>{num.num5}</span></div>\r\n                        <div><span>{num.num6}</span></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Numbers;","import React, {Component} from 'react';\r\nimport Numbers from './Numbers';\r\nimport './NumberList.css';\r\n\r\nclass NumberList extends Component {\r\n\r\n    render() {\r\n        const {numbers} = this.props;\r\n        \r\n        const list = numbers.map(\r\n            item => (\r\n                <Numbers num={item} index={item.key} key={item.key} />\r\n            )\r\n        );\r\n\r\n        return(\r\n            <div>\r\n                <div className='top'>\r\n                    <div className='firstString'>재미로 보는</div>\r\n                    <div className='secondString'>로또 번호 생성기</div>\r\n                </div>\r\n                <div>{list}</div>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default NumberList;","import React, { Component } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport \"./App.css\";\nimport Bottom from \"./component/Bottom\";\nimport NumberList from \"./component/NumberList\";\n\nclass App extends Component {\n  LineCount = 5;\n\n  state = {\n    numbers: [\n      // {\n      //   key : 0,\n      //   num1 : '1',\n      //   num2 : '2',\n      //   num3 : '3',\n      //   num4 : '4',\n      //   num5 : '5',\n      //   num6 : '6',\n      // }\n    ],\n    QRResult: \"\",\n    QRShow: false\n  };\n\n  initArray = (tmpArray, iCount) => {\n    for (var iIndex = 0; iIndex < iCount; iIndex++) {\n      tmpArray[iIndex] = 0;\n    }\n    return tmpArray;\n  };\n\n  getOneNum = iCount => {\n    var iRandNum = 0;\n    var tmpArray = new Array(45);\n\n    tmpArray = this.initArray(tmpArray, 45);\n    for (var iIndex = 0; iIndex < iCount; iIndex++) {\n      iRandNum = Math.floor(Math.random() * 45);\n      tmpArray[iRandNum] = tmpArray[iRandNum] + 1;\n    }\n    var iMaxCnt = 0;\n\n    for (iIndex = 0; iIndex < 45; iIndex++) {\n      if (tmpArray[iIndex] > iMaxCnt) {\n        iRandNum = iIndex;\n        iMaxCnt = tmpArray[iIndex];\n      }\n    }\n    return iRandNum + 1;\n  };\n\n  clearNumList = () => {\n    const { numbers } = this.state;\n    // 상태 모두 삭제\n    this.setState({\n      numbers: numbers.splice(0, numbers.length)\n    });\n  };\n\n  makeNumList = () => {\n    this.clearNumList();\n\n    var newNum = [];\n\n    var tmpNum = 0;\n\n    for (var iIndex = 0; iIndex < this.LineCount; iIndex++) {\n      var aryTmp = [];\n      for (var iIndex1 = 0; iIndex1 < 6; iIndex1++) {\n        tmpNum = this.getOneNum(100000);\n        while (aryTmp.indexOf(tmpNum) !== -1) {\n          tmpNum = this.getOneNum(100000);\n        }\n        aryTmp = aryTmp.concat(tmpNum);\n      }\n      aryTmp = aryTmp.sort(function(a, b) {\n        return a - b;\n      });\n      newNum = newNum.concat({\n        key: iIndex,\n        num1: aryTmp[0],\n        num2: aryTmp[1],\n        num3: aryTmp[2],\n        num4: aryTmp[3],\n        num5: aryTmp[4],\n        num6: aryTmp[5]\n      });\n    }\n\n    this.setState({\n      numbers: newNum\n    });\n  };\n\n  handleRemake = () => {\n    this.makeNumList();\n  };\n\n  componentDidMount() {\n    this.handleRemake();\n  }\n\n  onQRScan = () => {\n    this.setState({ QRShow: !this.state.QRShow });\n  };\n\n  QRHandleScan = data => {\n    if (data) {\n      this.setState({ QRResult: data });\n      console.log(data);\n    }\n  };\n\n  QRHandleErr = err => {\n    console.log(err);\n  };\n\n  render() {\n    const { numbers, QRShow } = this.state;\n\n    return (\n      <div className=\"App\">\n        {QRShow ? (\n          <div>\n            <QrReader\n              delay={300}\n              onError={this.QRHandleErr}\n              onScan={this.QRHandleScan}\n              className=\"QRScanArea\"\n            />\n            <p>{this.state.QRResult}</p>\n          </div>\n        ) : (\n          <NumberList numbers={numbers} />\n        )}\n        <Bottom\n          onRemake={this.handleRemake}\n          onQRScan={this.onQRScan}\n          QRShow={QRShow}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}